import React, { useState } from 'react';
import ReactDOM from 'react-dom';

const SimulationInfoPopup = ({ isOpen, onClose, initialCategory = 'sinkhole-factors' }) => {
  const [selectedFactor, setSelectedFactor] = useState('sinkhole-size');

  // Í∞ÄÏ§ëÏπò ÏöîÏù∏ ÏÑ§Î™Ö Îç∞Ïù¥ÌÑ∞
  const factorDescriptions = {
    'sinkhole-size': {
      title: '1. Ïã±ÌÅ¨ÌôÄ ÌÅ¨Í∏∞ Í∞ÄÏ§ëÏπò',
      description: 'Ïã±ÌÅ¨ÌôÄÏùò Î¨ºÎ¶¨Ï†Å ÌÅ¨Í∏∞Í∞Ä ÏúÑÌóòÎèÑÏóê ÎØ∏ÏπòÎäî ÏòÅÌñ•ÏùÑ Ï°∞Ï†ïÌï©ÎãàÎã§. ÌÅ∞ Ïã±ÌÅ¨ÌôÄÏùºÏàòÎ°ù Îçî ÎÜíÏùÄ ÏúÑÌóòÎèÑÎ•º Î∂ÄÏó¨ÌïòÏó¨ ÎåÄÌòï ÏÇ¨Í≥†Ïùò Ïã¨Í∞ÅÏÑ±ÏùÑ Î∞òÏòÅÌï©ÎãàÎã§.',
      factors: [
        {
          name: 'ÌÅ¨Í∏∞ Í∞ÄÏ§ëÏπò ÏòÅÌñ•ÎèÑ',
          weight: '0.0 ~ 5.0Î∞∞',
          description: 'Ïã±ÌÅ¨ÌôÄÏùò Ìè≠, Ïó∞Ïû•, ÍπäÏù¥Î•º Í≥±Ìïú Í∞íÏóê Ï†ÅÏö©ÎêòÎäî Í∞ÄÏ§ëÏπò Î∞∞Ïàò',
          detail: '„Ñ¥ Ïã±ÌÅ¨ÌôÄÏùò Î¨ºÎ¶¨Ï†Å Í∑úÎ™®Í∞Ä ÌÅ¥ÏàòÎ°ù ÏúÑÌóòÎèÑÍ∞Ä Í∏∞ÌïòÍ∏âÏàòÏ†ÅÏúºÎ°ú Ï¶ùÍ∞Ä'
        }
      ]
    },
    'sinkhole-damage': {
      title: '2. Ïã±ÌÅ¨ÌôÄ ÌîºÌï¥ Í∞ÄÏ§ëÏπò',
      description: 'Ïã±ÌÅ¨ÌôÄ Î∞úÏÉùÏúºÎ°ú Ïù∏Ìïú Ïù∏Î™ÖÌîºÌï¥ÏôÄ Ïû¨ÏÇ∞ÌîºÌï¥Í∞Ä ÏúÑÌóòÎèÑÏóê ÎØ∏ÏπòÎäî ÏòÅÌñ•ÏùÑ Ï°∞Ï†ïÌï©ÎãàÎã§. ÏÇ¨Îßù, Î∂ÄÏÉÅ, Ï∞®ÎüâÌîºÌï¥Î•º Ï¢ÖÌï©Ï†ÅÏúºÎ°ú Í≥†Î†§Ìï©ÎãàÎã§.',
      factors: [
        {
          name: 'ÌîºÌï¥ Í∞ÄÏ§ëÏπò ÏòÅÌñ•ÎèÑ',
          weight: '0.0 ~ 5.0Î∞∞',
          description: 'ÏÇ¨Îßù(12Ï†ê), Î∂ÄÏÉÅ(3Ï†ê), Ï∞®ÎüâÌîºÌï¥(1Ï†ê) Ï†êÏàòÏóê Ï†ÅÏö©ÎêòÎäî Í∞ÄÏ§ëÏπò Î∞∞Ïàò',
          detail: '„Ñ¥ Ïù∏Î™ÖÌîºÌï¥Í∞Ä ÌÅ¥ÏàòÎ°ù ÏúÑÌóòÎèÑÍ∞Ä ÌÅ¨Í≤å Ï¶ùÍ∞ÄÌïòÎ©∞, ÏÇ¨Í≥†Ïùò Ïã¨Í∞ÅÏÑ±ÏùÑ Î∞òÏòÅ'
        }
      ]
    },
    'sinkhole-time': {
      title: '3. Ïã±ÌÅ¨ÌôÄ ÏãúÍ∞Ñ Í∞ÄÏ§ëÏπò',
      description: 'Ïã±ÌÅ¨ÌôÄ Î∞úÏÉù ÏãúÏ†êÏùò ÏµúÍ∑ºÏÑ±Ïù¥ ÏúÑÌóòÎèÑÏóê ÎØ∏ÏπòÎäî ÏòÅÌñ•ÏùÑ Ï°∞Ï†ïÌï©ÎãàÎã§. ÏµúÍ∑º Î∞úÏÉùÌïú Ïã±ÌÅ¨ÌôÄÏùºÏàòÎ°ù Îçî ÎÜíÏùÄ ÏúÑÌóòÎèÑÎ•º Î∂ÄÏó¨Ìï©ÎãàÎã§.',
      factors: [
        {
          name: 'ÏãúÍ∞Ñ Í∞ÄÏ§ëÏπò ÏòÅÌñ•ÎèÑ',
          weight: '0.0 ~ 3.0Î∞∞',
          description: 'Î∞úÏÉù ÏãúÏ†êÏóê Îî∞Î•∏ ÏãúÍ∞Ñ Í∞ÄÏ§ëÏπòÏóê Ï†ÅÏö©ÎêòÎäî Î∞∞Ïàò',
          detail: '„Ñ¥ ÏµúÍ∑º Î∞úÏÉùÌïú Ïã±ÌÅ¨ÌôÄÏùºÏàòÎ°ù ÌòÑÏû¨ ÏúÑÌóò ÏÉÅÌô©ÏùÑ Îçî Ïûò Î∞òÏòÅ'
        }
      ]
    },
    'sinkhole-frequency': {
      title: '4. Ïã±ÌÅ¨ÌôÄ Î∞òÎ≥µ Î∞úÏÉù Í∞ÄÏ§ëÏπò',
      description: 'Í∞ôÏùÄ ÏßÄÏ†êÏóêÏÑú Î∞òÎ≥µÏ†ÅÏúºÎ°ú Î∞úÏÉùÌïòÎäî Ïã±ÌÅ¨ÌôÄÏùò ÏúÑÌóòÎèÑÎ•º Ï°∞Ï†ïÌï©ÎãàÎã§. ÏßßÏùÄ Í∏∞Í∞ÑÏóê Ïó¨Îü¨ Î≤à Î∞úÏÉùÌï†ÏàòÎ°ù ÎÜíÏùÄ ÏúÑÌóòÎèÑÎ•º Î∂ÄÏó¨Ìï©ÎãàÎã§.',
      factors: [
        {
          name: 'Î∞òÎ≥µ Î∞úÏÉù Í∞ÄÏ§ëÏπò ÏòÅÌñ•ÎèÑ',
          weight: '0.0 ~ 3.0Î∞∞',
          description: 'ÏõîÎãπ Î∞úÏÉùÎ•†Ïóê Îî∞Î•∏ Î∞òÎ≥µ Î∞úÏÉù Í∞ÄÏ§ëÏπòÏóê Ï†ÅÏö©ÎêòÎäî Î∞∞Ïàò',
          detail: '„Ñ¥ Í∞ôÏùÄ ÏßÄÏ†êÏóêÏÑú Î∞òÎ≥µ Î∞úÏÉùÌïòÎäî Ïã±ÌÅ¨ÌôÄÏùÄ ÏßÄÎ∞ò Î∂àÏïàÏ†ïÏÑ±ÏùÑ ÎÇòÌÉÄÎÉÑ'
        }
      ]
    },
    'subway-level1': {
      title: '5. ÏßÄÌïòÏ≤† 1Ï∞® ÏòÅÌñ•Í∂å Í∞ÄÏ§ëÏπò',
      description: 'ÏßÄÌïòÏ≤† ÎÖ∏ÏÑ†ÏúºÎ°úÎ∂ÄÌÑ∞ 100m Ïù¥ÎÇ¥ ÏßÄÏó≠Ïùò ÏúÑÌóòÎèÑ Í∞ÄÏ§ëÏπòÎ•º Ï°∞Ï†ïÌï©ÎãàÎã§. ÏßÄÌïòÏ≤† Í≥µÏÇ¨ÏôÄ ÏßÅÏ†ëÏ†ÅÏúºÎ°ú Ïó∞Í¥ÄÎêú ÏßÄÏó≠Ïùò ÏúÑÌóòÎèÑÎ•º Î∞òÏòÅÌï©ÎãàÎã§.',
      factors: [
        {
          name: '1Ï∞® ÏòÅÌñ•Í∂å Í∞ÄÏ§ëÏπò',
          weight: '0.0 ~ 1.0',
          description: 'ÏßÄÌïòÏ≤† ÎÖ∏ÏÑ† 100m Ïù¥ÎÇ¥ ÏßÄÏó≠Ïóê Ï†ÅÏö©ÎêòÎäî Í∞ÄÏ§ëÏπò',
          detail: '„Ñ¥ ÏßÄÌïòÏ≤† Í≥µÏÇ¨Î°ú Ïù∏Ìïú ÏßÄÎ∞ò Î≥ÄÎèôÍ≥º Îß§ÏÑ§Î¨º ÏòÅÌñ•Ïù¥ ÏßëÏ§ëÎêòÎäî Íµ¨Í∞Ñ'
        }
      ]
    },
    'subway-level2': {
      title: '6. ÏßÄÌïòÏ≤† 2Ï∞® ÏòÅÌñ•Í∂å Í∞ÄÏ§ëÏπò',
      description: 'ÏßÄÌïòÏ≤† ÎÖ∏ÏÑ†ÏúºÎ°úÎ∂ÄÌÑ∞ 100m~300m ÏßÄÏó≠Ïùò ÏúÑÌóòÎèÑ Í∞ÄÏ§ëÏπòÎ•º Ï°∞Ï†ïÌï©ÎãàÎã§. ÏßÄÌïòÏ≤† Í≥µÏÇ¨Ïùò Í∞ÑÏ†ëÏ†Å ÏòÅÌñ•ÏùÑ Î∞õÎäî ÏßÄÏó≠Ïùò ÏúÑÌóòÎèÑÎ•º Î∞òÏòÅÌï©ÎãàÎã§.',
      factors: [
        {
          name: '2Ï∞® ÏòÅÌñ•Í∂å Í∞ÄÏ§ëÏπò',
          weight: '0.0 ~ 0.8',
          description: 'ÏßÄÌïòÏ≤† ÎÖ∏ÏÑ† 100m~300m ÏßÄÏó≠Ïóê Ï†ÅÏö©ÎêòÎäî Í∞ÄÏ§ëÏπò',
          detail: '„Ñ¥ Íµ¥Ï∞©Í≥µÏÇ¨ÎÇò Í≥µÎèô ÌòïÏÑ± Í∞ÄÎä•ÏÑ±Ïù¥ ÎÜíÏïÑ ÏúÑÌóò Ï§ëÍ∞Ñ Ï†ïÎèÑ'
        }
      ]
    },
    'subway-level3': {
      title: '7. ÏßÄÌïòÏ≤† 3Ï∞® ÏòÅÌñ•Í∂å Í∞ÄÏ§ëÏπò',
      description: 'ÏßÄÌïòÏ≤† ÎÖ∏ÏÑ†ÏúºÎ°úÎ∂ÄÌÑ∞ 300m~500m ÏßÄÏó≠Ïùò ÏúÑÌóòÎèÑ Í∞ÄÏ§ëÏπòÎ•º Ï°∞Ï†ïÌï©ÎãàÎã§. ÏßÄÌïòÏ≤† Í≥µÏÇ¨Ïùò Ïû•Í∏∞Ï†Å ÏòÅÌñ•ÏùÑ Î∞õÎäî ÏßÄÏó≠Ïùò ÏúÑÌóòÎèÑÎ•º Î∞òÏòÅÌï©ÎãàÎã§.',
      factors: [
        {
          name: '3Ï∞® ÏòÅÌñ•Í∂å Í∞ÄÏ§ëÏπò',
          weight: '0.0 ~ 0.5',
          description: 'ÏßÄÌïòÏ≤† ÎÖ∏ÏÑ† 300m~500m ÏßÄÏó≠Ïóê Ï†ÅÏö©ÎêòÎäî Í∞ÄÏ§ëÏπò',
          detail: '„Ñ¥ ÏßÅÏ†ë ÏòÅÌñ•ÏùÄ ÎÇÆÏßÄÎßå ÎàÑÏ†Å Ïπ®Ìïò Í∞ÄÎä•ÏÑ±Ïù¥ ÏûàÎäî ÏßÄÏó≠'
        }
      ]
    }
  };

  const factorCategories = [
    {
      id: 'sinkhole-factors',
      title: 'Ïã±ÌÅ¨ÌôÄ ÏúÑÌóòÎèÑ ÏöîÏù∏',
      icon: 'üöß',
      factors: [
        { id: 'sinkhole-size', name: 'ÌÅ¨Í∏∞ Í∞ÄÏ§ëÏπò', icon: 'üìè' },
        { id: 'sinkhole-damage', name: 'ÌîºÌï¥ Í∞ÄÏ§ëÏπò', icon: '‚ö†Ô∏è' },
        { id: 'sinkhole-time', name: 'ÏãúÍ∞Ñ Í∞ÄÏ§ëÏπò', icon: '‚è∞' },
        { id: 'sinkhole-frequency', name: 'Î∞òÎ≥µ Î∞úÏÉù Í∞ÄÏ§ëÏπò', icon: 'üîÑ' }
      ]
    },
    {
      id: 'subway-factors',
      title: 'ÏßÄÌïòÏ≤† ÏòÅÌñ•ÎèÑ ÏöîÏù∏',
      icon: 'üöá',
      factors: [
        { id: 'subway-level1', name: '1Ï∞® ÏòÅÌñ•Í∂å', icon: '1Ô∏è‚É£' },
        { id: 'subway-level2', name: '2Ï∞® ÏòÅÌñ•Í∂å', icon: '2Ô∏è‚É£' },
        { id: 'subway-level3', name: '3Ï∞® ÏòÅÌñ•Í∂å', icon: '3Ô∏è‚É£' }
      ]
    }
  ];

  // Ï¥àÍ∏∞ Ïπ¥ÌÖåÍ≥†Î¶¨Ïóê Îî∞Îùº Ï≤´ Î≤àÏß∏ ÏöîÏù∏ ÏÑ†ÌÉù
  React.useEffect(() => {
    if (isOpen) {
      if (initialCategory === 'sinkhole-factors') {
        setSelectedFactor('sinkhole-size');
      } else if (initialCategory === 'subway-factors') {
        setSelectedFactor('subway-level1');
      }
    }
  }, [isOpen, initialCategory]);

  if (!isOpen) return null;

  const currentDescription = factorDescriptions[selectedFactor];

  return ReactDOM.createPortal((
    <div className="simulation-info-overlay">
      <div className="simulation-info-popup">
        <div className="popup-header">
          <h2 className="popup-title">ÏãúÎÆ¨Î†àÏù¥ÏÖò ÎèÑÏõÄÎßê</h2>
          <button className="popup-close" onClick={onClose}>√ó</button>
        </div>
        
        <div className="popup-content">
          <div className="popup-sidebar">
            {factorCategories.map(category => (
              <div key={category.id} className="factor-category">
                <h3 className="category-title">
                  <span className="category-icon">{category.icon}</span>
                  {category.title}
                </h3>
                <div className="factor-list">
                  {category.factors.map(factor => (
                    <div
                      key={factor.id}
                      className={`factor-item ${selectedFactor === factor.id ? 'active' : ''}`}
                      onClick={() => setSelectedFactor(factor.id)}
                    >
                      <span className="factor-icon">{factor.icon}</span>
                      <span className="factor-name">{factor.name}</span>
                      {selectedFactor === factor.id && <span className="active-indicator">‚óè</span>}
                    </div>
                  ))}
                </div>
              </div>
            ))}
          </div>
          
          <div className="popup-main">
            <div className="description-section">
              <h3 className="description-title">{currentDescription.title}</h3>
              <p className="description-text">{currentDescription.description}</p>
              
              <div className="weight-factors">
                {currentDescription.factors.map((factor, index) => (
                  <div key={index} className="weight-factor">
                    <div className="weight-factor-header">
                      <span className="weight-factor-name">+ {factor.name}</span>
                      <span className="weight-factor-value">{factor.weight}</span>
                    </div>
                    <p className="weight-factor-description">{factor.description}</p>
                    <p className="weight-factor-detail">{factor.detail}</p>
                  </div>
                ))}
              </div>
            </div>
            
            <div className="visual-guide">
              <div className="guide-title">ÏãúÍ∞ÅÏ†Å Í∞ÄÏù¥Îìú</div>
              <div className="guide-content">
                <div className="guide-item">
                  <div className="guide-color low"></div>
                  <span>ÎÇÆÏùå (0-2)</span>
                </div>
                <div className="guide-item">
                  <div className="guide-color medium"></div>
                  <span>Ï§ëÍ∞Ñ (2-5)</span>
                </div>
                <div className="guide-item">
                  <div className="guide-color high"></div>
                  <span>ÎÜíÏùå (5-10)</span>
                </div>
                <div className="guide-item">
                  <div className="guide-color critical"></div>
                  <span>ÏπòÎ™ÖÏ†Å (10+)</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  ), document.body);
};

export default SimulationInfoPopup;
